{% autoescape None %}
# -*- coding: utf-8 -*-

"""
.. module:: {ontology-name}.v{ontology-version-packagename}.{file-name}

   :license: GPL / CeCILL
   :platform: Unix, Windows
   :synopsis: The ontology constraint set.

.. moduleauthor:: Earth System Documentation (ES-DOC) <dev@es-doc.org>
.. note:: Code generated using the esdoc-mp framework.

"""
import datetime
import uuid

{% for p in o.packages %}import typeset_for_{{ p.name }}_package as {{ p.name }}
{% end %}



# Map of ontology types to constraints.
CONSTRAINTS = {
    # ------------------------------------------------
    # Classes.
    # ------------------------------------------------
{% for p in o.packages %}
{% for c in p.classes %}
    {{ c.op_full_name }}: (
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'type'] %}
        ('{{ n }}', '{{ t }}', {{ lu.get_type_functional_name(v, True) }}),
{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'cardinality'] %}
        ('{{ n }}', '{{ t }}', "{{ v }}"),
{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'constant'] %}
        ('{{ n }}', '{{ t }}', {{ '"{}"'.format(v) if isinstance(v, (str, unicode)) else v }}),
{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'regex'] %}
        ('{{ n }}', '{{ t }}', "{{ v }}"),
{% end %}
    ),
{% end %}
{% end %}
    # ------------------------------------------------
    # Class properties.
    # ------------------------------------------------
{% for p in o.packages %}
{% for c in p.classes %}
{% for cp in c.properties %}
    ({{ c.op_full_name }}, '{{ cp.name }}'): (
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'type' and ct[0] == cp.name)] %}
        ('{{ t }}', {{ lu.get_type_functional_name(v, True) }}),
{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'cardinality' and ct[0] == cp.name)] %}
        ('{{ t }}', "{{ v }}"),
{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'constant' and ct[0] == cp.name)] %}
        ('{{ t }}', {{ '"{}"'.format(v) if isinstance(v, (str, unicode)) else v }}),
{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'regex' and ct[0] == cp.name)] %}
        ('{{ t }}', "{{ v }}"),
{% end %}
    ),
{% end %}
{% end %}
{% end %}
}