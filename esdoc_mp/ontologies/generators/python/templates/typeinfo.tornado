{% autoescape None %}
# -*- coding: utf-8 -*-

"""
.. module:: {ontology-name}.v{ontology-version-packagename}.{file-name}

   :license: GPL / CeCILL
   :platform: Unix, Windows
   :synopsis: Typeset information for the {ontology-name} v{ontology-version} ontology.

.. moduleauthor:: Earth System Documentation (ES-DOC) <dev@es-doc.org>
.. note:: Code generated using the esdoc-mp framework.

"""
from collections import defaultdict
import datetime
import uuid


{% for p in o.packages %}import typeset_for_{{ p.name }}_package as {{ p.name }}
{% end %}


# Module exports.
__all__ = [
    'PACKAGES',
    'DOCUMENT_TYPES',
    'CLASSES',
    'CLASS_PROPERTIES',
    'CLASS_OWN_PROPERTIES',
    'BASE_CLASSES',
    'BASE_CLASSED',
    'SUB_CLASSED',
    'SUB_CLASSES',
    'ENUMS',
    'CONSTRAINTS'
    ]

# Supported packages.
PACKAGES = (
{% for p in o.packages %}    {{ p.op_name }},
{% end %})

# Supported classes.
CLASSES = (
{% for c in o.classes %}    {{ c.op_full_name }},
{% end %})

# Supported enums.
ENUMS = (
{% for e in o.enums %}    {{ e.op_full_name }},
{% end %})

# Set of supported types.
TYPES = CLASSES + ENUMS

# Total enum members across all enums.
TOTAL_ENUM_MEMBERS = sum(len(e.members) for e in ENUMS)

# Supported document types.
DOCUMENT_TYPES = (
{% for et in o.entities %}    {{ et.op_full_name }},
{% end %})

# Supported class properties.
CLASS_PROPERTIES = { {% for c in o.classes %}
    {{ c.op_full_name }}: ({% for cp in c.all_properties %}
        '{{ cp.name }}',{% end %}
    ),{% end %}
}

# Supported class own properties.
CLASS_OWN_PROPERTIES = { {% for c in o.classes %}
    {{ c.op_full_name }}: ({% for cp in c.properties %}
        '{{ cp.name }}',{% end %}
    ),{% end %}
}

# Total class properties.
TOTAL_CLASS_PROPERTIES = sum(len(i) for i in CLASS_OWN_PROPERTIES.values())

# Base classes.
BASE_CLASSES = defaultdict(tuple){% for c in [c for c in o.classes if c.base] %}
BASE_CLASSES[{{ c.op_full_name }}] = ({% for bc in c.bases %}{{ bc.op_full_name }}, {% end %}){% end %}

# Classes with base classes.
BASE_CLASSED = tuple(BASE_CLASSES.keys())

# Sub classes.
SUB_CLASSES = defaultdict(tuple){% for c in [c for c in o.sub_classed] %}
SUB_CLASSES[{{ c.op_full_name }}] = ({% for sc in c.sub_classes %}
    {{ sc.op_full_name }},{% end %}
    ){% end %}

# Classes that have been sub classed.
SUB_CLASSED = tuple(SUB_CLASSES.keys())

# Maximum class depth in hierarchy.
CLASS_HIERACHY_DEPTH = max(len(v) for v in BASE_CLASSES.values())

# Map of ontology types to constraints.
CONSTRAINTS = {
    # ------------------------------------------------
    # Classes.
    # ------------------------------------------------
{% for c in o.classes %}
    {{ c.op_full_name }}: (
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'type'] %}
        ('{{ n }}', '{{ t }}', {{ lu.get_type_functional_name(v, True) }}),{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'cardinality'] %}
        ('{{ n }}', '{{ t }}', "{{ v }}"),{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'constant'] %}
        ('{{ n }}', '{{ t }}', {{ '"{}"'.format(v) if isinstance(v, (str, unicode)) else v }}),{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if ct[1] == 'regex'] %}
        ('{{ n }}', '{{ t }}', "{{ v }}"),{% end %}    ),{% end %}
    # ------------------------------------------------
    # Class properties.
    # ------------------------------------------------
{% for c in o.classes %}
{% for cp in c.all_properties %}
    ({{ c.op_full_name }}, '{{ cp.name }}'): (
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'type' and ct[0] == cp.name)] %}
        ('{{ t }}', {{ lu.get_type_functional_name(v, True) }}),{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'cardinality' and ct[0] == cp.name)] %}
        ('{{ t }}', "{{ v }}"),{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'constant' and ct[0] == cp.name)] %}
        ('{{ t }}', {{ '"{}"'.format(v) if isinstance(v, (str, unicode)) else v }}),{% end %}
{% for n, t, v in [ct for ct in c.all_constraints if (ct[1] == 'regex' and ct[0] == cp.name)] %}
        ('{{ t }}', "{{ v }}"),{% end %}    ),{% end %}{% end %}
}

# Count of class constraints.
TOTAL_CONSTRAINTS = sum(len(CONSTRAINTS[c]) for c in CLASSES)
